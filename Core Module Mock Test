                                                           Core Module  - Javascript
ANSWER - 1
1. static:
The static position is the default positioning value for HTML elements, where the element follows the normal flow of the document.
example
.static-element {
  /* No specific positioning styles required */
}

2.fixed:
The fixed position value positions the element relative to the viewport, meaning it stays fixed even when the page is scrolled.
example
.fixed-element {
  position: fixed;
  top: 20px;
  right: 20px;
}

3.sticky:
The sticky position value is similar to fixed, as it also remains fixed in a specific position. However, it transitions to relative positioning when it reaches a certain scroll position.
example
.sticky-element {
  position: sticky;
  top: 50px;
}
In the above example, the .sticky-element is positioned 50px from the top of its containing element. As the user scrolls, it sticks to that position until it reaches a certain threshold, at which point it becomes relative and resumes normal flow.

4.relative:
The relative position value positions the element relative to its normal position, allowing adjustments using top, right, bottom, and left properties.
example
.relative-element {
  position: relative;
  top: 10px;
  left: 20px;
}


5.absolute:
The absolute position value positions the element relative to its closest positioned ancestor (an element with a position value other than static) or to the initial containing block if no positioned ancestor exists.
example
.absolute-element {
  position: absolute;
  top: 50px;
  left: 50px;
}
In the above example, the .absolute-element is positioned 50px down and 50px to the right of its closest positioned ancestor.
=================================================================================================================================================
ANSWER -2 
<form>
  <label for="name">Name:</label>
  <input type="text" id="name" name="name" required pattern="[A-Za-z\s]+" title="Please enter a valid name (only letters and spaces)">
  
  <label for="email">Email:</label>
  <input type="email" id="email" name="email" required>
  
  <label for="phone">Phone Number:</label>
  <input type="tel" id="phone" name="phone" required pattern="[0-9]{10}" title="Please enter a valid 10-digit phone number">
  
  <label for="password">Password:</label>
  <input type="password" id="password" name="password" required minlength="6">
  
  <label for="age">Age:</label>
  <input type="number" id="age" name="age" required min="18" max="100">
  
  <label for="gender">Gender:</label>
  <select id="gender" name="gender" required>
    <option value="">Select gender</option>
    <option value="male">Male</option>
    <option value="female">Female</option>
    <option value="other">Other</option>
  </select>
  
  <label for="dob">Date of Birth:</label>
  <input type="date" id="dob" name="dob" required>
  
  <label for="color">Favorite Color:</label>
  <input type="color" id="color" name="color" required>
  
  <button type="submit">Submit</button>
</form>
In the above code, each form field has an associated <label> element to provide a text description. The form fields utilize various input types (text, email, tel, password, number, date, color) and validation attributes (required, pattern, min, max, minlength) to enforce basic validation rules.
For example, the name field uses the pattern attribute with a regular expression [A-Za-z\s]+ to allow only letters and spaces. The phone field uses the pattern attribute with a regular expression [0-9]{10} to require a 10-digit phone number. The password field has a minimum length of 6 characters specified with the minlength attribute. The age field uses the min and max attributes to specify a range.

==========================================================================================================================================================================================================================================================================================================================================================================================================================================
ANSWER - 3
Execution context is a fundamental concept in JavaScript that defines the environment in which JavaScript code is executed. It includes the variables, functions, and scopes that are available at a given point during the execution of the code. Each time a JavaScript program runs, it creates an execution context stack, known as the "call stack," which manages the order in which functions are executed.

To understand execution context better, let's dive into its components and how they interact:
1.Global Execution Context:

The global execution context is the default context created when the JavaScript program starts running.
It contains global variables and functions that are accessible throughout the program.
It has a special object called the "global object" (e.g., window object in browsers, global object in Node.js) associated with it.
The this keyword in the global execution context refers to the global object.

2.Function Execution Context:

Whenever a function is called, a new function execution context is created and pushed onto the call stack.
Each function execution context has its own set of variables and function declarations, forming a "scope."
The function's arguments, local variables, and inner functions are defined within this context.
The this keyword in a function execution context depends on how the function is called (e.g., method invocation, constructor invocation, etc.).

3.Execution Context Stack (Call Stack):

The execution context stack, also known as the "call stack," manages the order in which functions are executed.
It follows the Last-In-First-Out (LIFO) principle, where the most recently pushed context is the first to be popped off when a function completes its execution.
The currently executing function is always on the top of the call stack, and once it finishes, the control returns to the previous context.

Call Stack
--------------
|            |
|            | <--- Function Execution Context (e.g., function3)
|            |
|            | <--- Function Execution Context (e.g., function2)
|            |
|            | <--- Global Execution Context
--------------
====================================================================================================================================================================
ANSWER - 4
<!DOCTYPE html>
<html>
<head>
  <title>My Website</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <header>
    <nav>
      <ul>
        <li><a href="#">Home</a></li>
        <li><a href="#">About</a></li>
        <li><a href="#">Services</a></li>
        <li><a href="#">Contact</a></li>
      </ul>
    </nav>
  </header>
  
  <main>
    <section class="hero">
      <h1>Welcome to My Website</h1>
      <p>Discover the world of creativity and innovation.</p>
      <a href="#" class="cta-button">Learn More</a>
    </section>
    
    <section class="image-gallery">
      <div class="image">
        <img src="image1.jpg" alt="Image 1">
      </div>
      <div class="image">
        <img src="image2.jpg" alt="Image 2">
      </div>
      <div class="image">
        <img src="image3.jpg" alt="Image 3">
      </div>
    </section>
  </main>
</body>
</html>

CSS Portion of code->
/* Basic styling for the navbar */
nav ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

nav li {
  display: inline-block;
  margin-right: 20px;
}

nav a {
  text-decoration: none;
  color: #333;
}

/* Styling for the hero section */
.hero {
  text-align: center;
  background-color: #f2f2f2;
  padding: 40px;
}

.hero h1 {
  font-size: 36px;
  margin-bottom: 20px;
}

.hero p {
  font-size: 18px;
  margin-bottom: 30px;
}

.cta-button {
  display: inline-block;
  padding: 10px 20px;
  background-color: #333;
  color: #fff;
  text-decoration: none;
  border-radius: 4px;
}

/* Styling for the image gallery section */
.image-gallery {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-gap: 20px;
}

.image {
  width: 100%;
  height: 0;
  padding-bottom: 100%; /* To maintain aspect ratio of the image */
  overflow: hidden;
}

.image img {
  width: 100%;
  height: 100%;
  object-fit: cover; /* To fill the container while maintaining aspect ratio */
}
=========================================================================================================================================
ANSWER-5
<div class="gallery">
  <div class="image">
    <img src="image1.jpg" alt="Image 1">
  </div>
  <div class="image">
    <img src="image2.jpg" alt="Image 2">
  </div>
  <div class="image">
    <img src="image3.jpg" alt="Image 3">
  </div>
  <div class="image">
    <img src="image4.jpg" alt="Image 4">
  </div>
  <div class="image">
    <img src="image5.jpg" alt="Image 5">
  </div>
  <div class="image">
    <img src="image6.jpg" alt="Image 6">
  </div>
</div>
CSS Portion of code->
.gallery {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-gap: 20px;
}

.image {
  width: 100%;
  height: 0;
  padding-bottom: 100%; /* To maintain aspect ratio of the image */
  overflow: hidden;
}

.image img {
  width: 100%;
  height: 100%;
  object-fit: cover; /* To fill the container while maintaining aspect ratio */
}
===========================================================================================================================
