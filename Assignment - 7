                                                                   Assignment - 7
Answer-1
class Solution {
    public boolean isIsomorphic(String s, String t) {
        Map<Character,Character> first = new HashMap<Character,Character>();
        for(int i=0;i<s.length();i++){
            char c1 = s.charAt(i);
            char c2 = t.charAt(i);
            if(first.containsKey(c1)){ 
                if(first.get(c1) != c2){
                    return false;
                }
            }
            else{
                if(first.containsValue(c2)){
                    return false;
                }
            }
            
            first.put(c1,c2);
        }
        return true;
    }
}
====================================================================================================================
Answer - 2
import java.util.HashMap;
import java.util.Map;

public class StrobogrammaticNumber {
    public static void main(String[] args) {
        String num = "69";
        
        boolean isStrobogrammatic = isStrobogrammaticNumber(num);
        
        if (isStrobogrammatic) {
            System.out.println("The number is strobogrammatic.");
        } else {
            System.out.println("The number is not strobogrammatic.");
        }
    }

    public static boolean isStrobogrammaticNumber(String num) {
        Map<Character, Character> mapping = new HashMap<>();
        mapping.put('0', '0');
        mapping.put('1', '1');
        mapping.put('6', '9');
        mapping.put('8', '8');
        mapping.put('9', '6');
        
        int left = 0;
        int right = num.length() - 1;
        
        while (left <= right) {
            char leftChar = num.charAt(left);
            char rightChar = num.charAt(right);
            
            if (!mapping.containsKey(leftChar) || mapping.get(leftChar) != rightChar) {
                return false;
            }
            
            left++;
            right--;
        }
        
        return true;
    }
}
============================================================================================================
Answer -3 
class Solution {
    public String addStrings(String num1, String num2) {
        int i = num1.length()-1;
        int j = num2.length()-1;
        int carry = 0;
        int sum = 0;
        StringBuilder s = new StringBuilder();
        while(i >= 0 || j >= 0){
            int num1_digit = i >= 0 ? (num1.charAt(i)) - '0' : 0 ;
            int num2_digit = j >= 0? (num2.charAt(j)) - '0': 0;
            sum = num1_digit + num2_digit + carry;
            s.append((char)(sum % 10 + '0'));
            carry = sum / 10;
            i--;
            j--;
        }
        if(carry > 0){
            s.append((char)(carry + '0'));
        }
        return s.reverse().toString();
    }
}
==================================================================================================================
Answer -4
class Solution {

    public String reverseWords(String s) {
        int l = 0;
        int r = 0;
        char ch[] = s.toCharArray();
        for(r=0; r <ch.length ;r++){
            if(ch[r] == ' '){
                reverse(ch,l,r-1);
                l = r+1;
            }
            else if(r == ch.length-1){
                reverse(ch,l,r);
            }

        }
        return new String(ch);
    }
    private void reverse(char[] chars, int left, int right) {
        while (left < right) {
            char temp = chars[left];
            chars[left] = chars[right];
            chars[right] = temp;
            left++;
            right--;
        }
    }
}
=================================================================================================
Answer -5
class Solution {
    public String reverseStr(String s, int k) {
        char ch[] = s.toCharArray();
        int n = ch.length;
        for(int i=0; i<n; i += 2*k){
            int left = i;
            int right = Math.min(i + k -1, n-1);
            reverse(ch,left,right);

        }
        return new String(ch);
    }
    public void reverse(char[] arr, int l, int r){
            while(l < r){
            char temp = arr[l];
            arr[l] = arr[r];
            arr[r] = temp;
            l++;
            r--;
        }
    }
}
========================================================================================================
Answer - 6
class Solution {
    public boolean rotateString(String s, String goal) {
        String s1 = s.concat(s);
        
        if(s.length()== goal.length() && s1.contains(goal)){
            return true;
        }
        return false;
    }
}
==========================================================================================================
Answer - 7
class Solution {
    public boolean backspaceCompare(String s, String t) {
        List l1 = new ArrayList<>();
        List l2 = new ArrayList<>();
        for(int i=0;i<s.length();i++){
            if(s.charAt(i) == '#'){
                if(!l1.isEmpty()){
                l1.remove(l1.size()-1);
                }
            }
            else{
                l1.add(s.charAt(i));
            }
        }

        for(int i=0;i<t.length();i++){
            if(t.charAt(i) == '#'){
                if(!l2.isEmpty()){
                l2.remove(l2.size()-1);
            }
            }
            else{
                l2.add(t.charAt(i));
            }
        }
            return l1.equals(l2);
    }
}
==========================================================================================
Answer -8 
class Solution {
    public boolean checkStraightLine(int[][] coordinates) {
        int nums[] = coordinates[0];
        int nums1[] = coordinates[1];
        float s = slope(nums,nums1);
        for(int i=2;i<coordinates.length;i++){
            int nums3[] = coordinates[i];
            float new_s = slope(nums,nums3);
            if(new_s != s){
                return false;
            }
        }
        return true;
    }
    float slope(int[] nums, int[] nums1){
        return (float)(nums1[1]-nums[1])/(nums1[0]-nums[0]);
    }
}
===============================================================================================
