                                            Assignment - 10 LinkedList
Answer - 1
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void deleteNode(ListNode node) {
        node.val = node.next.val;
        node.next = node.next.next;
    }
}
======================================================================================================================================================================

Answer - 2
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        //Handling base case
        if(head != null && head.val == val){
            head = head.next;
        }
        if(head == null){
            return null;
        }
        ListNode temp = head;
        while(temp != null && temp.next != null){
            if(temp.next.val == val){
                temp.next = temp.next.next;

            }else{
                temp = temp.next;
            }
        }
        if(head!=null && head.val == val){
            return head.next;
        }
        return head;
    }
}
=========================================================================================================================================================

Answer - 3

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode temp = null;
        if(list1 == null){
            return list2;
        }
        if(list2 == null){
            return list1;
        }
        if(list1.val < list2.val){
            temp = list1;
            temp.next = mergeTwoLists(list1.next, list2);
        }else{
            temp = list2;
            temp.next = mergeTwoLists(list1, list2.next);
        }
    return temp;

    }
}
====================================================================================================================================================

Answer - 4

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null || head.next == null){
            return null;
        }
        //Initialise slow and fast pointers
        ListNode slow = head;
        ListNode fast = head;

        //Detect cycle in LL
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast){
                break;
            }
        }

        if(fast == null || fast.next == null){
            return null;
        }
        //Finding node where cycle begins
        slow = head;
        while(slow != fast){
            slow = slow.next;
            fast = fast.next;
        }
        return slow;
    }
}
========================================================================================================================================================

Answer - 5
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null){
            return null;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode slow = dummy;
        ListNode fast = dummy;
        //Move fast pointer n+1 steps ahead of slow ptr
        for(int i=0;i<n+1;i++){
            if(fast == null){
                return null;
            }
            fast = fast.next;
        }
        //Move till fast ptr reaches end of string.
        while(fast != null){
            slow = slow.next;
            fast = fast.next;
        }
        slow.next = slow.next.next;
        return dummy.next;
    }
}
======================================================================================================================================================

Answer - 6





